#lang shplait

type Exp
| intE(n :: Int)
| plusE(l :: Exp, r :: Exp)
| multE(l :: Exp, r :: Exp)

fun interp(expr :: Exp) :: Int:
  match expr
  | intE(val): val
  | plusE(l, r): interp(l) + interp(r)
  | multE(l, r): interp(l) * interp(r)

fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | ~else:
      match s
      | '$left + $right': plusE(parse(left), parse(right))
      | '$left * $right': multE(parse(left), parse(right))
      | '($inner)': parse(inner)
      | ~else: error(#'parse, "bad syntax: " +& s)

module test:
  // Interpreter tests
  check: interp(intE(42))
         ~is 42

  check: interp(plusE(intE(9), intE(10)))
         ~is 19

  check: interp(plusE(multE(intE(4), intE(5)), intE(6)))
         ~is 26

  // Expression parser tests
  check: parse('1')
         ~is intE(1)

  check: parse('1 + 2')
         ~is plusE(intE(1), intE(2))
       
  check: parse('1 * 2')
         ~is multE(intE(1), intE(2))

  check: parse('1 + 2 * 3 + 4')
         ~is plusE(plusE(intE(1), multE(intE(2), intE(3))), intE(4))

  check: parse('1 * (2 + 3)')
         ~is multE(intE(1), plusE(intE(2), intE(3)))

  check: parse('1 + + 2')
         ~raises "bad syntax"
