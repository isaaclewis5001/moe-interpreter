#lang shplait

type Exp
| intE(n :: Int)
| idE(s :: Symbol)
| plusE(l :: Exp, r :: Exp)
| multE(l :: Exp, r :: Exp)
| appE(s :: Exp, arg :: Exp)
| letE(s :: Symbol, rhs :: Exp, body :: Exp)
| funE(s :: Symbol, body :: Exp)

type Binding
| bind(name :: Symbol, val :: Value)

type Env = Listof(Binding)

def mt_env = []
def extend_env = cons

type Value
| intV(n :: Int)
| closV(arg :: Symbol, body :: Exp, env :: Env)

fun find(l :: Listof(?A), f :: ?A -> Boolean) :: Optionof(?A):
  fun find_inner(l :: Listof(?A)) :: Optionof(?A):
    match l
    | []: none()
    | cons(x, xs):
        if f(x):
        | some(x)
        | find_inner(xs)
  find_inner(l)

fun lookup(n :: Symbol, env :: Env):
  match find(env, fun(x): bind.name(x) == n)
  | some(x): x
  | none(): error(#'lookup, "free variable: " +& n)

fun interp(expr :: Exp, env :: Env) :: Value:
  fun interp_int(expr :: Exp) :: Int:
    match interp_inner(expr)
    | intV(n): n
    | ~else: error(#'interp, "not a number")

  fun interp_clos(expr :: Exp) :: Symbol * Exp * Env:
    match interp_inner(expr)
    | closV(arg, body, env): values(arg, body, env)
    | ~else: error(#'interp, "not a function")

  fun interp_inner(expr :: Exp) :: Value:
    match expr
    | intE(val): intV(val)
    | plusE(l, r): intV(interp_int(l) + interp_int(r))
    | multE(l, r): intV(interp_int(l) * interp_int(r))
    | idE(name): bind.val(lookup(name, env))
    | appE(fun_exp, fun_arg):
        def values(arg_name, fun_body, fun_env) = interp_clos(fun_exp)
        interp(fun_body, extend_env(bind(arg_name, interp_inner(fun_arg)), fun_env))
    | letE(sym, rhs, body):
        interp(body, extend_env(bind(sym, interp_inner(rhs)), env))
    | funE(param, body):
        closV(param, body, env)
  interp_inner(expr)

fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | syntax_is_symbol(s):
      idE(syntax_to_symbol(s))
  | ~else:
      match s
      | 'let $sym = $rhs: $body': letE(syntax_to_symbol(sym), parse(rhs), parse(body))
      | '$left + $right': plusE(parse(left), parse(right))
      | '$left * $right': multE(parse(left), parse(right))
      | 'fun($param): $body': funE(syntax_to_symbol(param), parse(body))
      | '$f($arg)': appE(parse(f),parse(arg))
      | '($inner)': parse(inner)
      | ~else: error(#'parse, "bad syntax: " +& s)


module test:

  def bad = parse('fun(x): y')
  def double = interp(parse('fun(x): x + x'), [])
  def quadruple = interp(parse('fun(x): double(double(x))'), [bind(#'double, double)])
  def funs_env = [bind(#'double, double), bind(#'quadruple, quadruple)]


  // Interpreter tests
  check: interp(intE(42), mt_env)
         ~is intV(42)

  check: interp(plusE(intE(9), intE(10)), mt_env)
         ~is intV(19)

  check: interp(plusE(multE(intE(4), intE(5)), intE(6)), mt_env)
         ~is intV(26)

  check: interp(parse('x + 4'), [bind(#'x, intV(4))])
         ~is intV(8)

  check: interp(parse('x'), mt_env)
         ~raises "free variable"

  check: interp(parse('quadruple(2)'), funs_env)
         ~is intV(8)

  check: interp(parse('let x = 5 : x + x'), funs_env)
         ~is intV(10)

  check: interp(parse('let x = 5 * quadruple(7) : let y = double(x) + x : x + y'), funs_env)
         ~is intV(560)

  check: interp(parse('let eval_quadratic = (fun(a): fun(b): fun(c): fun(x): a * x * x + b * x + c): eval_quadratic(4)(4)(1)(5)'), mt_env)
         ~is intV(121)
         
  check: interp(parse('3 + fun(x): x'), mt_env)
         ~raises "not a number"
         
  check: interp(parse('3(6)'), mt_env)
         ~raises "not a function"

  // Expression parser tests
  check: parse('1')
         ~is intE(1)

  check: parse('1 + 2')
         ~is plusE(intE(1), intE(2))
       
  check: parse('1 * 2')
         ~is multE(intE(1), intE(2))

  check: parse('1 + 2 * 3 + 4')
         ~is plusE(plusE(intE(1), multE(intE(2), intE(3))), intE(4))

  check: parse('1 * (2 + 3)')
         ~is multE(intE(1), plusE(intE(2), intE(3)))

  check: parse('x')
         ~is idE(#'x)

  check: parse('double(9)')
         ~is appE(idE(#'double), intE(9))

  check: parse('1 + double(9)')
         ~is plusE(intE(1), appE(idE(#'double), intE(9)))

  check: parse('1 + + 2')
         ~raises "bad syntax"


