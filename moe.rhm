#lang shplait

type Exp
| intE(n :: Int)
| plusE(l :: Exp, r :: Exp)
| subE(l :: Exp, r :: Exp)
| multE(l :: Exp, r :: Exp)
| divE(l :: Exp, r :: Exp)
| modE(l :: Exp, r :: Exp)
| add1E(x :: Exp)
| sub1E(x :: Exp)
| minE(a :: Exp, b :: Exp)
| maxE(a :: Exp, b :: Exp)

fun interp(expr :: Exp) :: Int:
  match expr
  | intE(val): val
  | plusE(l, r): interp(l) + interp(r)
  | subE(l, r): interp(l) - interp(r)
  | multE(l, r): interp(l) * interp(r)
  | divE(l, r): interp(l) / interp(r)
  | modE(l, r): interp(l) mod interp(r)
  | add1E(a): interp(a) + 1
  | sub1E(a): interp(a) - 1
  | minE(a, b): min(interp(a), interp(b))
  | maxE(a, b): max(interp(a), interp(b))


fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | ~else:
      match s
      | '$left + $right': plusE(parse(left), parse(right))
      | '$left - $right': subE(parse(left), parse(right))
      | '$left * $right': multE(parse(left), parse(right))
      | '$left / $right': divE(parse(left), parse(right))
      | '$left % $right': modE(parse(left), parse(right))
      | '($inner)': parse(inner)
      | 'add1($a)': add1E(parse(a))
      | 'sub1($a)': sub1E(parse(a))
      | 'min($a, $b)': minE(parse(a), parse(b))
      | 'max($a, $b)': maxE(parse(a), parse(b))
      | ~else: error(#'parse, "bad syntax: " +& s)

module test:
  // Interpreter tests
  check: interp(intE(42))
         ~is 42

  check: interp(plusE(intE(9), intE(10)))
         ~is 19

  check: interp(plusE(multE(intE(4), intE(5)), intE(6)))
         ~is 26

  check: interp(parse('(15 / 4) % 3'))
         ~is 0

  check: interp(parse('15 / 4 % 3 - 10'))
         ~is 5

  check: interp(parse('min(15, 10)'))
         ~is 10

  check: interp(parse('max(15, 10)'))
         ~is 15

  check: interp(parse('add1(41)'))
         ~is 42

  check: interp(parse('sub1(41)'))
         ~is 40

  // Expression parser tests
  check: parse('1')
         ~is intE(1)

  check: parse('1 + 2')
         ~is plusE(intE(1), intE(2))

  check: parse('1 + 2 - 3')
         ~is plusE(intE(1), subE(intE(2), intE(3)))
       
  check: parse('1 * 2')
         ~is multE(intE(1), intE(2))

  check: parse('1 % 2 / 3')
         ~is divE(modE(intE(1), intE(2)), intE(3))

  check: parse('1 - 2 * 3 + 4')
         ~is plusE(subE(intE(1), multE(intE(2), intE(3))), intE(4))

  check: parse('1 * (2 + 3)')
         ~is multE(intE(1), plusE(intE(2), intE(3)))

  check: parse('1 + + 2')
         ~raises "bad syntax"
