#lang shplait

type Exp
| intE(n :: Int)
| plusE(l :: Exp, r :: Exp)
| subE(l :: Exp, r :: Exp)
| multE(l :: Exp, r :: Exp)
| divE(l :: Exp, r :: Exp)
| modE(l :: Exp, r :: Exp)
| add1E(x :: Exp)
| sub1E(x :: Exp)
| minE(a :: Exp, b :: Exp)
| maxE(a :: Exp, b :: Exp)

type Value
| intV(x :: Int)
| boolV(x :: Boolean)

fun interpInt(x :: Exp) :: Int:
  match interp(x)
  | intV(y): y
  | ~else: error(#'interpInt, "invalid type for boolean operation")


fun interpBoolean(x :: Exp) :: Boolean:
  match interp(x)
  | boolV(y): y
  | ~else: error(#'interpBoolean, "invalid type for boolean operation")

fun intOp2(a :: Exp, b :: Exp, f :: (Int, Int) -> Int) :: Value:
  intV(f(interpInt(a), interpInt(b)))

  

fun interp(expr :: Exp) :: Value:
  match expr
  | intE(val): intV(val)
  | plusE(l, r): intOp2(l, r, fun(x, y): x + y)
  | subE(l, r): intOp2(l, r, fun(x, y): x - y)
  | multE(l, r): intOp2(l, r, fun(x, y): x * y)
  | divE(l, r): intOp2(l, r, fun(x, y): x / y)
  | modE(l, r): intOp2(l, r, fun(x, y): x mod y)
  | add1E(a): intV(interpInt(a) + 1)
  | sub1E(a): intV(interpInt(a) - 1)
  | minE(a, b): intOp2(a, b, fun(x, y): min(x, y))
  | maxE(a, b): intOp2(a, b, fun(x, y): max(x, y))

fun parse(s :: Syntax) :: Exp:
  cond
  | syntax_is_integer(s):
      intE(syntax_to_integer(s))
  | ~else:
      match s
      | '$left + $right': plusE(parse(left), parse(right))
      | '$left - $right': subE(parse(left), parse(right))
      | '$left * $right': multE(parse(left), parse(right))
      | '$left / $right': divE(parse(left), parse(right))
      | '$left % $right': modE(parse(left), parse(right))
      | '($inner)': parse(inner)
      | 'add1($a)': add1E(parse(a))
      | 'sub1($a)': sub1E(parse(a))
      | 'min($a, $b)': minE(parse(a), parse(b))
      | 'max($a, $b)': maxE(parse(a), parse(b))
      | ~else: error(#'parse, "bad syntax: " +& s)

module test:
  // Interpreter tests
  check: interp(intE(42))
         ~is intV(42)

  check: interp(plusE(intE(9), intE(10)))
         ~is intV(19)

  check: interp(plusE(multE(intE(4), intE(5)), intE(6)))
         ~is intV(26)

  check: interp(parse('(15 / 4) % 3'))
         ~is intV(0)

  check: interp(parse('15 / 4 % 3 - 10'))
         ~is intV(5)

  check: interp(parse('min(15, 10)'))
         ~is intV(10)

  check: interp(parse('max(15, 10)'))
         ~is intV(15)

  check: interp(parse('add1(41)'))
         ~is intV(42)

  check: interp(parse('sub1(41)'))
         ~is intV(40)

  // Expression parser tests
  check: parse('1')
         ~is intE(1)

  check: parse('1 + 2')
         ~is plusE(intE(1), intE(2))

  check: parse('1 + 2 - 3')
         ~is plusE(intE(1), subE(intE(2), intE(3)))
       
  check: parse('1 * 2')
         ~is multE(intE(1), intE(2))

  check: parse('1 % 2 / 3')
         ~is divE(modE(intE(1), intE(2)), intE(3))

  check: parse('1 - 2 * 3 + 4')
         ~is plusE(subE(intE(1), multE(intE(2), intE(3))), intE(4))

  check: parse('1 * (2 + 3)')
         ~is multE(intE(1), plusE(intE(2), intE(3)))

  check: parse('1 + + 2')
         ~raises "bad syntax"
